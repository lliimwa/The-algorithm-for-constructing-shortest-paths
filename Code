using System;
using System.Collections.Generic;

class Width
{
    static (Dictionary<int, int>, Dictionary<int, List<int>>) BFS(Dictionary<int, List<int>> graph, int start) //Определяет метод BFS, который принимает граф и начальную вершину и возвращает кортеж из двух словарей: расстояний и путей
    {
        var distances = new Dictionary<int, int>(); //Создает словарь для хранения расстояний от начальной вершины до каждой другой
        var paths = new Dictionary<int, List<int>>(); //Создает словарь для хранения путей от начальной вершины до каждой другой
        var queue = new Queue<int>(); //Создает очередь для хранения вершин, которые нужно обработать
        var visited = new HashSet<int>(); //Создает множество для отслеживания посещенных вершин

        // Инициализация
        queue.Enqueue(start); //Добавляет начальную вершину в очередь
        distances[start] = 0; //Устанавливает расстояние до начальной вершины равным нулю
        visited.Add(start); //Добавляет начальную вершину в множество посещенных
        paths[start] = new List<int> { start }; // Инициализирует путь до начальной вершины как список, содержащий только ее саму

        while (queue.Count > 0) //Начинает цикл, который продолжается пока в очереди есть элементы
        {
            var current = queue.Dequeue(); //Извлекает первую вершину из очереди и сохраняет ее в переменной current

            foreach (var neighbor in graph[current]) //Начинает цикл по всем соседям текущей вершины

            {
                if (!visited.Contains(neighbor)) //Проверяет, была ли соседняя вершина уже посещена. Если нет, выполняем следующие действия
                {
                    visited.Add(neighbor); //Добавляет соседнюю вершину в множество посещенных
                    queue.Enqueue(neighbor); //Добавляет соседнюю вершину в очередь для дальнейшей обработки
                    distances[neighbor] = distances[current] + 1; // Устанавливает расстояние до соседней вершины как расстояние до текущей плюс один

                    paths[neighbor] = new List<int>(paths[current]) { neighbor }; //Создает новый список для пути до соседней вершины, копируя путь до текущей и добавляя соседнюю вершину в конец списка
                }
            }
        }

        return (distances, paths); //Возвращает кортеж из словарей расстояний и путей
    }
    static void Main()
    {
        //Создает словарь graph, где ключом является целое число(номер вершины), а значением — список целых чисел(соседние вершины)
        var graph = new Dictionary<int, List<int>>
        {
            { 1, new List<int> { 2, 3 } },
            { 2, new List<int> { 1 } },
            { 3, new List<int> { 1, 4, 5 } },
            { 4, new List<int> { 3, 5 } },
            { 5, new List<int> { 3, 4 } }
        };

        int startNode = 1; // Начальная вершина
        var (distances, paths) = BFS(graph, startNode); //Вызывает метод BFS, передавая ему граф и начальную вершину. Метод возвращает кортеж из двух значений: словаря расстояний (distances) и словаря путей (paths)

        // Выводим расстояния и пути от начальной вершины до всех остальных
        Console.WriteLine("Расстояния и пути от вершины " + startNode + ":");
        foreach (var node in graph.Keys) //Начинает цикл по всем ключам (вершинам) в графе
        {
            if (node != startNode) //Проверяет, является ли текущая вершина не равной начальной. Если равна, пропускаем итерацию
            {
                Console.WriteLine($"Вершина {node}: Расстояние = {distances[node]}, Путь = {string.Join(" -> ", paths[node])}");
            }
        }
    }

}
